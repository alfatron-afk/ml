import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier, plot_tree
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt

data = pd.read_csv("/content/drive/MyDrive/breast-cancer.csv")
target_column = 'diagnosis' # Adjust if your target column has a different name

X = data.drop(columns=[target_column])
y = data[target_column]
from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()
y = le.fit_transform(y) # This will convert 'B' and 'M' to 0 and 1

# Select only numerical columns from X for mean imputation
numerical_cols = X.select_dtypes(include=np.number).columns
X[numerical_cols] = X[numerical_cols].fillna(X[numerical_cols].mean())

# Step 3: Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Step 4: Build the Decision Tree classifier
decision_tree = DecisionTreeClassifier(random_state=42)
decision_tree.fit(X_train, y_train)

# Step 5: Make predictions
y_pred = decision_tree.predict(X_test)

# Step 6: Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
print(f"Accuracy of the Decision Tree classifier: {accuracy:.4f}")
plt.figure(figsize=(12, 8))
plot_tree(decision_tree, filled=True, feature_names=X.columns,
class_names=[str(c) for c in le.classes_])
plt.title('Decision Tree Visualization')
plt.show()
dummy_sample_values = [15.6] * X.shape[1]
new_sample = np.array([dummy_sample_values])
new_sample_df = pd.DataFrame(new_sample, columns=X_train.columns)


# Classify the new sample using the trained model
new_sample_pred_encoded = decision_tree.predict(new_sample_df)
new_sample_pred_original = le.inverse_transform(new_sample_pred_encoded)

print(f"The predicted class for the new sample is: {new_sample_pred_original[0]}")
